#pragma kernel CSMain
#pragma kernel CSNormalize
#include "SimplexNoise.compute"

#define TILE = 0

struct NoiseSettings {
    int seed;
    int numLayers;
    float noiseScale;
    float lacunarity;
    float persistence;
    float2 offset;//
};

StructuredBuffer<NoiseSettings> noiseSettings;
StructuredBuffer<float4> offsets;

static const int numThreads = 16;
static const int minMaxAccuracy = 10000;
uint resolution;
RWTexture2D<float4> Result;

static const float pi = 3.14159265359;
static const float radius = 1 / (2 * pi);

RWStructuredBuffer<int> minMaxBuffer;
float2 minMax;
float4 params;

[numthreads(numThreads,numThreads,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    NoiseSettings settings = noiseSettings[0];

    float amplitude = 1;
    float frequency = settings.noiseScale;

    float mapValue = 0;

    float2 pos = float2(id.x,id.y) / resolution;
    
    for (int layer = 0; layer < settings.numLayers; layer++) {
        float noise = snoise((pos+settings.offset/100) * frequency + offsets[layer].xy )*.5+.5;
        mapValue += noise * amplitude;
        amplitude *= settings.persistence;
        frequency *= settings.lacunarity;
    }
    

    /*
    float2 angle = float2(id.x,id.y) / resolution * 2 * pi;//
    float x = settings.offset.x/100.0 + cos(angle.x) * radius;
    float y = settings.offset.x/100.0 + cos(angle.y) * radius;
    float z = settings.offset.y/100.0 + sin(angle.x) * radius;
    float w = settings.offset.y/100.0 + sin(angle.y) * radius;
    float4 samplePos = float4(x,y,z,w);

    for (int layer = 0; layer < settings.numLayers; layer++) {
        float noise = snoise(samplePos * frequency + offsets[layer])*.5+.5;//
        mapValue += noise * amplitude;
        amplitude *= settings.persistence;
        frequency *= settings.lacunarity;
    }
    */

    mapValue/=settings.numLayers;
    

    InterlockedMin(minMaxBuffer[0], (int)(mapValue*minMaxAccuracy));
    InterlockedMax(minMaxBuffer[1], (int)(mapValue*minMaxAccuracy));
    //InterlockedAdd(counterBuffer[0], 1);//

    Result[id.xy] = pow(saturate(((mapValue-minMax.x)/(minMax.y-minMax.x)-params.x)*params.y), params.z);
    //Result[id.xy] = mapValue;

}

[numthreads(numThreads,numThreads,1)]
void CSNormalize (uint3 id : SV_DispatchThreadID)
{
    float minVal = (float)minMaxBuffer[0]/minMaxAccuracy;
    float maxVal = (float)minMaxBuffer[1]/minMaxAccuracy;

    float4 normalizedVal = (Result[id.xy]-minVal)/(maxVal-minVal);
    Result[id.xy] = normalizedVal;
    //Result[id.xy] = 1;//

}
